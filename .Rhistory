)
#life_stages_symbols <- as.data.frame(life_stages_symbols)
temp_symbol <- unlist(t(life_stages_symbols))
life_stages_symbolic <-
unlist(sapply(1:length(temp_symbol), function(x) {
parse(text = temp_symbol[x])
}))
# density dependent symbols
density_stage_symbols <- matrix(1, nrow = Nstage, ncol = Nstage)
diag(density_stage_symbols) <- paste("s", 1:Nstage, sep = "")
for (i in 1:Nstage)
{
density_stage_symbols[pmin(i + 1, Nstage), i] <-
paste("s", i, sep = "")
}
# identify the reproductive stage
density_stage_symbols[1, 2:Nstage] <- "sE * s0"
diag(density_stage_symbols) <- paste("s", 1:Nstage, sep = "")
temp_dens_symbol <- unlist(t(density_stage_symbols))
density_stage_symbolic <-
unlist(sapply(1:length(temp_dens_symbol), function(x) {
parse(text = temp_dens_symbol[x])
}))
# stressor response symbols
stressor_stage_symbols <- matrix(1, nrow = Nstage, ncol = Nstage)
diag(stressor_stage_symbols) <- paste("s", 1:Nstage, sep = "")
for (i in 1:Nstage)
{
stressor_stage_symbols[pmin(i + 1, Nstage), i] <-
paste("s", i, sep = "")
}
# identify the reproductive stage
stressor_stage_symbols[1, 2:Nstage] <- "sE * s0"
diag(stressor_stage_symbols) <- paste("s", 1:Nstage, sep = "")
#life_stages_symbols <- as.data.frame(life_stages_symbols)
temp_stress_symbol <- unlist(t(stressor_stage_symbols))
stressor_stage_symbolic <-
unlist(sapply(1:length(temp_stress_symbol), function(x) {
parse(text = temp_stress_symbol[x])
}))
varNames <- c("sE", "s0", paste("s", 1:Nstage, sep = ""))
# calculate stage-specific survivals and transition rates
probs <- stage_probs(survival, years)
tr_prob <- survival - probs
life_cycle <- matrix(0, Nstage, Nstage)
# survival probabilities
life_cycle[grep("pr", life_stages)] <- probs
# transition probabilities
life_cycle[grep("tr", life_stages)] <- tr_prob[-Nstage]
life_cycle[grep("fec", life_stages)] <-
mat[which(mat > 0)] * life_pars["events", "Value"] * life_pars["eps", "Value"] *
life_pars["SE", "Value"] * life_pars["S0", "Value"] * life_pars["SR", "Value"] /
life_pars["int", "Value"]
# initialize the survival/transition rates subject to a stage-specific density-dependence
d_mat <- matrix(1, nrow = Nstage, Nstage)
d_stage <- matrix(0, Nstage, Nstage)
d_stage[1, which(mat > 0)] <- 1
for (i in 2:Nstage)
{
d_stage[i, (i - 1):i] <- i
}
remove.packages("JoeModelCE")
remove.packages("JoeModelCE")
remove.packages("JoeModelCE")
install.packages(getwd(), repos = NULL, type = "source")
#----------------------------------------------------
# Build and Tests
#----------------------------------------------------
library(usethis)
library(testthat)
library(rhub)
library(devtools)
library(usethis)
library(qpdf)
library(kableExtra)
# Loading unfinished package to memory...
rm(list = ls())
devtools::load_all()
devtools::document()
devtools::test()  # Ru
#----------------------------------------------------
# pkgdown Creation
#----------------------------------------------------
# https://pkgdown.r-lib.org/
# install.packages("pkgdown")
library(pkgdown)
pkgdown::build_site()
library(JoeModelCE)
# ----------------------------------------
# Import of stressor response and magnitude workbook
filename_rm <- system.file("extdata", "stressor_magnitude_unc_ARTR.xlsx", package = "JoeModelCE")
filename_sr <- system.file("extdata", "stressor_response_fixed_ARTR.xlsx", package = "JoeModelCE")
dose <- StressorMagnitudeWorkbook(filename = filename_rm, scenario_worksheet = "natural_unc")
sr_wb_dat <- StressorResponseWorkbook(filename = filename_sr)
nsims <- 10
jmr <- JoeModel_Run(dose = dose, sr_wb_dat = sr_wb_dat, MC_sims = nsims)
jmr
sr_wb_dat
dose
MC_sims
# Next ----------------------------------------
# Import of stressor response and magnitude workbook
filename_rm <- system.file("extdata", "stressor_magnitude_unc_ARTR.xlsx", package = "JoeModelCE")
filename_sr <- system.file("extdata", "stressor_response_fixed_ARTR.xlsx", package = "JoeModelCE")
smw <- StressorMagnitudeWorkbook(filename = filename_rm, scenario_worksheet = "natural_unc")
library(JoeModelCE)
# Next ----------------------------------------
# Import of stressor response and magnitude workbook
filename_rm <- system.file("extdata", "stressor_magnitude_unc_ARTR.xlsx", package = "JoeModelCE")
filename_sr <- system.file("extdata", "stressor_response_fixed_ARTR.xlsx", package = "JoeModelCE")
#----------------------------------------------------
# Build and Tests
#----------------------------------------------------
library(usethis)
library(testthat)
library(rhub)
library(devtools)
library(usethis)
library(qpdf)
library(kableExtra)
# Build and Tests
#----------------------------------------------------
library(usethis)
library(testthat)
library(rhub)
library(devtools)
library(usethis)
library(qpdf)
library(kableExtra)
# Loading unfinished package to memory...
rm(list = ls())
devtools::load_all()
devtools::document()
devtools::test()  # Run tests
# Next ----------------------------------------
# Import of stressor response and magnitude workbook
filename_rm <- system.file("extdata", "stressor_magnitude_unc_ARTR.xlsx", package = "JoeModelCE")
filename_sr <- system.file("extdata", "stressor_response_fixed_ARTR.xlsx", package = "JoeModelCE")
# Next ----------------------------------------
# Import of stressor response and magnitude workbook
filename_rm <- system.file("extdata", "stressor_magnitude_unc_ARTR.xlsx", package = "JoeModelCE")
filename_sr <- system.file("extdata", "stressor_response_fixed_ARTR.xlsx", package = "JoeModelCE")
smw <- StressorMagnitudeWorkbook(filename = filename_rm, scenario_worksheet = "natural_unc")
# Check basics
expect_true(ncol(smw) == 10)
expect_true(nrow(smw) > 500)
expect_true(setequal(colnames(smw), c("HUC_ID", "NAME", "Stressor", "Stressor_cat", "Mean", "SD", "Distribution", "Low_Limit", "Up_Limit", "Comments")))
# Test ----------------------------------------
# Test import of stressor response workbook
srw <- StressorResponseWorkbook(filename = filename_sr)
# Check basics
# Further ---------------------------------------
expect_true(class(srw) == "list")
# That all names are equal
s1 <- srw$main_sheet$Stressors
s2 <- srw$stressor_names
s3 <- names(srw$sr_dat)
expect_true(setequal(s1, s2))
expect_true(setequal(s1, s3))
expect_true(setequal(s2, s3))
filename_sr <- "C:/Users/mbayly/Desktop/Projects/EN2691 CEPopMod/2022 Extension/stressor_response_Interaction.xlsx"
srw <- StressorResponseWorkbook(filename = filename_sr)
srw
filename = filename_sr
# File to read and view stressor-response relations
main_sheet <- readxl::read_excel(filename, sheet = "Main")
# Order rows in main_sheet to match stressor names alphabetically
main_sheet <- main_sheet[order(main_sheet$Stressors), ]
# Get Stressor names
stressor_names <- as.character(main_sheet$Stressors)
stressor_names <- stressor_names[!(is.na(stressor_names))]
stressor_names
# Ensure worksheets are named properly
snames <- readxl::excel_sheets(filename)
snames <- snames[2:length(snames)]
snames
stressor_names
!(all(snames %in% stressor_names))
# File to read and view stressor-response relations
main_sheet <- readxl::read_excel(filename, sheet = "Main")
# Order rows in main_sheet to match stressor names alphabetically
main_sheet <- main_sheet[order(main_sheet$Stressors), ]
# Get Stressor names
stressor_names <- as.character(main_sheet$Stressors)
stressor_names <- stressor_names[!(is.na(stressor_names))]
# Ensure worksheets are named properly
snames <- readxl::excel_sheets(filename)
snames <- snames[2:length(snames)]
# File to read and view stressor-response relations
main_sheet <- readxl::read_excel(filename, sheet = "Main")
# Order rows in main_sheet to match stressor names alphabetically
main_sheet <- main_sheet[order(main_sheet$Stressors), ]
# Get Stressor names
stressor_names <- as.character(main_sheet$Stressors)
stressor_names <- stressor_names[!(is.na(stressor_names))]
# Ensure worksheets are named properly
snames <- readxl::excel_sheets(filename)
snames <- snames[2:length(snames)]
# Ignore any custom matrix interaction terms
grepl("MInt_", snames)
# Ignore any custom matrix interaction terms
snames[!(grepl("MInt_", snames))]
# Ignore any custom matrix interaction terms
snames <- snames[!(grepl("MInt_", snames))]
if (!(all(snames %in% stressor_names))) {
return("Bad worksheet names")
}
if (!(all(stressor_names %in% snames))) {
return("Bad worksheet names")
}
# Gather stressor-response relationships for other variables
ReadSheets <- function(sheet) {
dat <- readxl::read_xlsx(filename,
sheet = sheet
)
dat <- dat[, c(1:5)] # Exclude other extraneous columns to right (if any)
# Make sure columns in the correct order
colnames(dat)[1] <- "value"
if (any(colnames(dat) != c("value", "Mean System Capacity (%)", "SD", "low.limit", "up.limit"))) {
return("Column names in stressor response workbook out of order")
}
colnames(dat) <- c("value", "mean_system_capacity", "sd", "lwr", "upr")
return(dat)
}
sr_dat <- lapply(stressor_names, ReadSheets)
names(sr_dat) <- stressor_names
# Make pretty names
pretty_names <- c()
for (i in 1:length(stressor_names)) {
this_name <- stressor_names[i]
this_name <- gsub("_", " ", this_name)
pretty_names <- c(pretty_names, this_name)
}
# Build export object
ret_obj <- list()
ret_obj$main_sheet <- main_sheet
ret_obj$stressor_names <- stressor_names
ret_obj$pretty_names <- pretty_names
ret_obj$sr_dat <- sr_dat
sr_dat
#' Get Stressor Response Data from Excel Workbook
#'
#' @description Extract the stressor response data from each sheet in the Excel workbook.
#'
#' @details For more information about data format requirements, see the Data Upload and Results Export tab of the associated Shiny App.
#'
#' Uses `readxl::read_excel()` to load in workbook sheets:
#' * Main sheet: meta data / cover sheet indicating:
#'     * stressor names
#'     * categories
#'     * interactions and linkages
#'     * scales
#'     * approximation function type
#'     * target life stages
#'     * contribution to survival or capacity parameters
#'     * stressor units
#'     * target model (CE or population models, or both)
#'
#' * all additional stressor-response sheets in workbook
#'     * context specific stressor-response curve data
#'     * sheet name must match stressor names in Main sheet, otherwise "Bad worksheet names" error message.
#'     * sheets must contain columns for `<stressor_name>`, `Mean System Capacity (%)`, `SD`, `low.limit`, and `up.limit`
#'
#' @param filename A string. Relative file name to the stressor response Excel workbook.
#'
#' @returns A list object of the `main_sheet`, `stressor_names` and stressor response data frames (`sr_dat`).
#'
#' @export
StressorResponseWorkbook <- function(filename = NA) {
# File to read and view stressor-response relations
main_sheet <- readxl::read_excel(filename, sheet = "Main")
# Order rows in main_sheet to match stressor names alphabetically
main_sheet <- main_sheet[order(main_sheet$Stressors), ]
# Get Stressor names
stressor_names <- as.character(main_sheet$Stressors)
stressor_names <- stressor_names[!(is.na(stressor_names))]
# Ensure worksheets are named properly
snames <- readxl::excel_sheets(filename)
snames <- snames[2:length(snames)]
# Ignore any custom matrix interaction terms
snames <- snames[!(grepl("MInt_", snames))]
if (!(all(snames %in% stressor_names))) {
return("Bad worksheet names")
}
if (!(all(stressor_names %in% snames))) {
return("Bad worksheet names")
}
# Gather stressor-response relationships for other variables
ReadSheets <- function(sheet) {
dat <- readxl::read_xlsx(filename,
sheet = sheet
)
dat <- dat[, c(1:5)] # Exclude other extraneous columns to right (if any)
# Make sure columns in the correct order
colnames(dat)[1] <- "value"
if (any(colnames(dat) != c("value", "Mean System Capacity (%)", "SD", "low.limit", "up.limit"))) {
return("Column names in stressor response workbook out of order")
}
colnames(dat) <- c("value", "mean_system_capacity", "sd", "lwr", "upr")
return(dat)
}
sr_dat <- lapply(stressor_names, ReadSheets)
names(sr_dat) <- stressor_names
# Make pretty names
pretty_names <- c()
for (i in 1:length(stressor_names)) {
this_name <- stressor_names[i]
this_name <- gsub("_", " ", this_name)
pretty_names <- c(pretty_names, this_name)
}
# Build export object
ret_obj <- list()
ret_obj$main_sheet <- main_sheet
ret_obj$stressor_names <- stressor_names
ret_obj$pretty_names <- pretty_names
ret_obj$sr_dat <- sr_dat
ret_obj$MInt <- NA
return(ret_obj)
}
filename_sr <- "C:/Users/mbayly/Desktop/Projects/EN2691 CEPopMod/2022 Extension/stressor_response_Interaction.xlsx"
srw <- StressorResponseWorkbook(filename = filename_sr)
names(srw)
# Ensure worksheets are named properly
snames <- readxl::excel_sheets(filename)
snames <- snames[2:length(snames)]
any(grepl("MInt_", snames))
mint_names <- snames[grepl("MInt_", snames)]
mint_names
mint_names <- c()
mint_names
mint_names
mint_names <- c()
mint_names
# ----------------------------------------
# Import of stressor response and magnitude workbook
filename_rm <- system.file("extdata", "stressor_magnitude_unc_ARTR.xlsx", package = "JoeModelCE")
filename_sr <- system.file("extdata", "stressor_response_fixed_ARTR.xlsx", package = "JoeModelCE")
dose <- StressorMagnitudeWorkbook(filename = filename_rm, scenario_worksheet = "natural_unc")
sr_wb_dat <- StressorResponseWorkbook(filename = filename_sr)
sr_wb_dat
dose
nsims
MC_sims = nsims
nsims
nsims <- 10
MC_sims = nsims
MC_sims
adult_sys_cap = TRUE
stressors = NA
# Check ce.df object
# Any missing watersheds?
diff1 <- setdiff(unique(jmr$ce.df$HUC), unique(dose$HUC_ID))
expect_true(length(diff1) == 0)
# Check ce.df object
# Any missing watersheds?
diff1 <- setdiff(unique(jmr$ce.df$HUC), unique(dose$HUC_ID))
# Define variables in function as null
.data <- HUC <- simulation <- NULL
# -------------------------------------------------------
# Exclude Stressors not applicable to the adult lifestage
# -------------------------------------------------------
msheet <- sr_wb_dat$main_sheet
adult_sys_cap
if(adult_sys_cap) {
# Allowable stressors
allowable_stressors <- msheet$Stressors[which(msheet$Life_stages == 'adult')]
# Filter the sr_wb_dat in the local scope to omit stressors
if(all(is.na(stressors))) {
allowable_stressors <- allowable_stressors
} else {
allowable_stressors <- intersect(allowable_stressors, stressors)
}
if(length(allowable_stressors) == 0) {
stop("Must include more than one stressor applicable to adult system capacity")
}
# Filter the sr_wb_dat in the local scope to omit stressors
sr_wb_dat$main_sheet <- sr_wb_dat$main_sheet[which(sr_wb_dat$main_sheet$Stressors %in% allowable_stressors), ]
# Raw names
sr_wb_dat$stressor_names <- sr_wb_dat$stressor_names[which(sr_wb_dat$stressor_names %in% allowable_stressors)]
# Pretty names
sr_wb_dat$pretty_names <- sr_wb_dat$pretty_names[which(sr_wb_dat$stressor_names %in% allowable_stressors)]
# Dose-response data
sr_wb_dat$sr_dat <- sr_wb_dat$sr_dat[which(names(sr_wb_dat$sr_dat) %in% allowable_stressors)]
}
# Stressor Response
stressors <- sr_wb_dat$stressor_names
# Re-create the main sheet object
main.sheet <- sr_wb_dat$main_sheet
# Get the stressor names
stressor.list <- sr_wb_dat$sr_dat
stressors
main.sheet
stressor.list
# Run the Joe curves to generate the response functions
mean.resp.list <- mean_Response(
n.stressors = nrow(sr_wb_dat$main_sheet),
str.list = sr_wb_dat$sr_dat,
main = sr_wb_dat$main_sheet
)
mean.resp.list
# Get unique HUCs and stressors.
hucs <- unique(dose$HUC_ID)
sys.capacity <- array(
NA,
dim = c(
length(hucs),
length(stressors),
MC_sims
),
dimnames = list(
hucs,
stressors,
1:MC_sims
)
)
dose.values <- array(
NA,
dim = c(
length(hucs),
length(stressors),
MC_sims
),
dimnames = list(
hucs,
stressors,
1:MC_sims
)
)
dose.values.list <- array(list(),
dim = c(
length(hucs),
length(stressors)
)
)
i = 50
j = 8
remove.packages("JoeModelCE")
remove.packages("JoeModelCE")
remove.packages("JoeModelCE")
# Loading unfinished package to memory...
rm(list = ls())
devtools::load_all()
devtools::document()
# Next ----------------------------------------
# Import of stressor response and magnitude workbook
filename_rm <- system.file("extdata", "stressor_magnitude_unc_ARTR.xlsx", package = "JoeModelCE")
filename_sr <- system.file("extdata", "stressor_response_fixed_ARTR.xlsx", package = "JoeModelCE")
smw <- StressorMagnitudeWorkbook(filename = filename_rm, scenario_worksheet = "natural_unc")
# Check basics
expect_true(ncol(smw) == 10)
expect_true(nrow(smw) > 500)
expect_true(setequal(colnames(smw), c("HUC_ID", "NAME", "Stressor", "Stressor_cat", "Mean", "SD", "Distribution", "Low_Limit", "Up_Limit", "Comments")))
# Test ----------------------------------------
# Test import of stressor response workbook
srw <- StressorResponseWorkbook(filename = filename_sr)
# Check basics
# Further ---------------------------------------
expect_true(class(srw) == "list")
# That all names are equal
s1 <- srw$main_sheet$Stressors
s2 <- srw$stressor_names
s3 <- names(srw$sr_dat)
expect_true(setequal(s1, s2))
expect_true(setequal(s1, s3))
expect_true(setequal(s2, s3))
# Test ---------------------------------------
# Test that external workbook with interaction
# term loads correctly.
if(FALSE) {
filename_sr <- "C:/Users/mbayly/Desktop/Projects/EN2691 CEPopMod/2022 Extension/stressor_response_Interaction.xlsx"
srw <- StressorResponseWorkbook(filename = filename_sr)
} else {
print("TODO... FIX THIS...")
print("TODO... FIX THIS...")
print("TODO... FIX THIS...")
print("TODO... FIX THIS...")
print("TODO... FIX THIS...")
}
filename_sr
# Test ----------------------------------------
# Test import of stressor response workbook
srw <- StressorResponseWorkbook(filename = filename_sr)
srw
smw
smw
devtools::install_github("essatech/JoeModelCE")
remove.packages("JoeModelCE")
remove.packages("JoeModelCE")
remove.packages("JoeModelCE")
remove.packages("JoeModelCE")
remove.packages("JoeModelCE")
remove.packages("JoeModelCE")
remove.packages("JoeModelCE")
devtools::install_github("essatech/JoeModelCE")
install.packages(getwd(), repos = NULL, type = "source")
library(testthat)
library(rhub)
library(devtools)
#----------------------------------------------------
# Build and Tests
#----------------------------------------------------
library(usethis)
library(testthat)
library(rhub)
library(devtools)
library(usethis)
library(qpdf)
library(kableExtra)
# Loading unfinished package to memory...
rm(list = ls())
devtools::load_all()
devtools::document()
