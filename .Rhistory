#----------------------------------------------------
# Build and Tests
#----------------------------------------------------
library(usethis)
library(testthat)
library(rhub)
library(devtools)
library(usethis)
library(qpdf)
rm(list = ls())
devtools::load_all()
devtools::document()
devtools::test()  # Run tests
devtools::check() # Operating system test
rm(list = ls())
devtools::load_all()
devtools::document()
remove.packages("JoeModelCE")
install.packages(getwd(), repos = NULL, type = "source")
install.packages(getwd(), repos = NULL, type = "source")
# ----------------------------------------
# Import of stressor response and magnitude workbook
filename_rm <- system.file("extdata", "stressor_magnitude_unc_ARTR.xlsx", package = "JoeModelCE")
library(JoeModelCE)
# ----------------------------------------
# Import of stressor response and magnitude workbook
filename_rm <- system.file("extdata", "stressor_magnitude_unc_ARTR.xlsx", package = "JoeModelCE")
filename_sr <- system.file("extdata", "stressor_response_fixed_ARTR.xlsx", package = "JoeModelCE")
dose <- StressorMagnitudeWorkbook(filename = filename_rm, scenario_worksheet = "natural_unc")
sr_wb_dat <- StressorResponseWorkbook(filename = filename_sr)
# ----------------------------------------------------------
# Run the Joe Model
nsims <- 10
jmr <- JoeModel_Run(dose = dose, sr_wb_dat = sr_wb_dat, MC_sims = nsims)
dose
# split the watersheds to only 20
dose <- dose[sample(1:nrow(dose), 40, replace = FALSE), ]
dose
# ----------------------------------------
# Import of stressor response and magnitude workbook
filename_rm <- system.file("extdata", "stressor_magnitude_unc_ARTR.xlsx", package = "JoeModelCE")
filename_sr <- system.file("extdata", "stressor_response_fixed_ARTR.xlsx", package = "JoeModelCE")
dose <- StressorMagnitudeWorkbook(filename = filename_rm, scenario_worksheet = "natural_unc")
sr_wb_dat <- StressorResponseWorkbook(filename = filename_sr)
# split the watersheds to only 20
dose_sub <- dose[sample(1:nrow(dose), 40, replace = FALSE), ]
nsims <- 10
jmr <- JoeModel_Run(dose = dose_sub, sr_wb_dat = sr_wb_dat, MC_sims = nsims)
jmr
sr_wb_dat
# split the watersheds to only 20
dose_sub <- dose[sample(1:nrow(dose), 40, replace = FALSE), ]
nsims <- 10
jmr <- JoeModel_Run(dose = dose_sub, sr_wb_dat = sr_wb_dat, MC_sims = nsims)
jmr <- JoeModel_Run(dose = dose_sub, sr_wb_dat = sr_wb_dat, MC_sims = nsims)
names(jmr)
summary(jmr$ce.df)
summary(jmr$sc.dose.df)
dose
sr_wb_dat
MC_sims
# Define variables in function as null
.data <- HUC <- simulation <- NULL
# Stressor Response
stressors <- sr_wb_dat$stressor_names
# Re-create the main sheet object
main.sheet <- sr_wb_dat$main_sheet
# Get the stressor names
stressor.list <- sr_wb_dat$sr_dat
# Run the Joe curves to generate the response functions
mean.resp.list <- mean_Response(
n.stressors = nrow(sr_wb_dat$main_sheet),
str.list = sr_wb_dat$sr_dat,
main = sr_wb_dat$main_sheet
)
# Get unique HUCs and stressors.
hucs <- unique(dose$HUC_ID)
sys.capacity <- array(
NA,
dim = c(
length(hucs),
length(stressors),
MC_sims
),
dimnames = list(
hucs,
stressors,
1:MC_sims
)
)
dose.values <- array(
NA,
dim = c(
length(hucs),
length(stressors),
MC_sims
),
dimnames = list(
hucs,
stressors,
1:MC_sims
)
)
dose.values.list <- array(list(),
dim = c(
length(hucs),
length(stressors)
)
)
MC_sims
MC_sims <- 3-
))
MC_sims <- 30
# Define variables in function as null
.data <- HUC <- simulation <- NULL
# Stressor Response
stressors <- sr_wb_dat$stressor_names
# Re-create the main sheet object
main.sheet <- sr_wb_dat$main_sheet
# Get the stressor names
stressor.list <- sr_wb_dat$sr_dat
# Run the Joe curves to generate the response functions
mean.resp.list <- mean_Response(
n.stressors = nrow(sr_wb_dat$main_sheet),
str.list = sr_wb_dat$sr_dat,
main = sr_wb_dat$main_sheet
)
# Get unique HUCs and stressors.
hucs <- unique(dose$HUC_ID)
sys.capacity <- array(
NA,
dim = c(
length(hucs),
length(stressors),
MC_sims
),
dimnames = list(
hucs,
stressors,
1:MC_sims
)
)
dose.values <- array(
NA,
dim = c(
length(hucs),
length(stressors),
MC_sims
),
dimnames = list(
hucs,
stressors,
1:MC_sims
)
)
dose.values.list <- array(list(),
dim = c(
length(hucs),
length(stressors)
)
)
for (i in 1:length(hucs)) {
for (j in 1:length(stressors)) {
# find combination of HUC and stressor in the dose table
pnt.dose <- intersect(
grep(hucs[i], dose$HUC_ID),
grep(stressors[j], dose$Stressor)
)
# If nothing set - assume system capacity is 100%
if (length(pnt.dose) == 0) {
sys.capacity[i, j, ] <- 1 # System capacity is 1 if mssing
dose.values[i, j, ] <- NA
dose.values.list[i, j][[1]] <- NA
next
}
# find stressor in main.sheet for relationship
pnt.curv <- grep(stressors[j], main.sheet$Stressors)
# call system capacity function for each stressor
temp.list <- SystemCapacity(
f.dose.df = dose[pnt.dose, ],
f.main.df = main.sheet[pnt.curv, ],
f.stressor.df = stressor.list[[stressors[j]]],
f.mean.resp.list = mean.resp.list[[pnt.curv]],
n.sims = MC_sims
)
# assign system capacity for each stressor to array.
sys.capacity[i, j, ] <- temp.list$sys.cap
# store dose values as this is good output as well
dose.values[i, j, ] <- temp.list$dose
# The next dose array stores doses as a list and includes
# the individual additive doses (i.e., mortality doses)
dose.values.list[i, j][[1]] <- temp.list$dose.mat
}
# end j
}
# Print error messages if NA appears in the system capacity
# or stressor values arrays
if (any(is.na(sys.capacity))) {
message("At least one NA in system capacity array")
}
if (any(is.na(dose.values))) {
message("At least one NA in stressor values array")
}
browseVignettes()
plot(1:4)
summary(jmr$ce.df)
summary(jmr$sc.dose.df)
#----------------------------------------------------
# Build and Tests
#----------------------------------------------------
library(usethis)
library(testthat)
library(rhub)
library(devtools)
library(usethis)
library(qpdf)
rm(list = ls())
devtools::load_all()
devtools::document()
devtools::install()
library(JoeModelCE)
# ----------------------------------------
# Import of stressor response and magnitude workbook
filename_rm <- system.file("extdata", "stressor_magnitude_unc_ARTR.xlsx", package = "JoeModelCE")
filename_sr <- system.file("extdata", "stressor_response_fixed_ARTR.xlsx", package = "JoeModelCE")
dose <- StressorMagnitudeWorkbook(filename = filename_rm, scenario_worksheet = "natural_unc")
sr_wb_dat <- StressorResponseWorkbook(filename = filename_sr)
nsims <- 10
jmr <- JoeModel_Run(dose = dose, sr_wb_dat = sr_wb_dat, MC_sims = nsims)
# Check ce.df object
# Any missing watersheds?
diff1 <- setdiff(unique(jmr$ce.df$HUC), unique(dose$HUC_ID))
expect_true(length(diff1) == 0)
diff2 <- setdiff(unique(jmr$sc.dose.df$HUC), unique(dose$HUC_ID))
expect_true(length(diff2) == 0)
# Correct number of simulations
check_nsim <- unique(jmr$sc.dose.df$simulation) %>% length()
expect_true(check_nsim == nsims)
check_nsim <- unique(jmr$ce.df$simulation) %>% length()
expect_true(check_nsim == nsims)
# That CE values for watershed make sense
expect_true(min(jmr$ce.df$CE) == 0)
expect_true(max(jmr$ce.df$CE) <= 1 & max(jmr$ce.df$CE) >= 0.5)
expect_true(sd(jmr$ce.df$CE) > 0)
# That System Capacity Values Make Sense
expect_true(min(jmr$sc.dose.df$sys.cap) == 0)
# expect_true(max(jmr$sc.dose.df$sys.cap) == 1)
expect_true(sd(jmr$sc.dose.df$sys.cap) > 0)
head((jmr$sc.dose.df)
)
summary(jmr$ce.df)
summary(jmr$ce.df$CE)
hist(summary(jmr$ce.df$CE))
